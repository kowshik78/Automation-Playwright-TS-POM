# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Go to Homepage,Navbar, Homepage product add to cart
- Location: C:\Users\kowshik\Desktop\AutomationAssignment\tests\homepage.test.ts:46:5

# Error details

```
Error: locator.waitFor: Test timeout of 120000ms exceeded.
Call log:
  - waiting for locator('.summary.entry-summary h2.name') to be visible

    at CartPage.addToCartFromDetails (C:\Users\kowshik\Desktop\AutomationAssignment\pages\CartPage.ts:67:30)
    at C:\Users\kowshik\Desktop\AutomationAssignment\tests\homepage.test.ts:63:38
```

# Test source

```ts
   1 | import { expect, Page } from '@playwright/test';
   2 | import { HomePage } from '../pages/HomePage';
   3 |
   4 | export class CartPage {
   5 |     constructor(private page: Page) {
   6 |         this.page = page;
   7 | }
   8 |
   9 | async productVSurlChecker(url: string) {
  10 |     let productPart;
  11 |     if (url.includes('/products/')) {
  12 |         let productPartWithoutUrl = url.split('/products/')[1];
  13 |         productPart = productPartWithoutUrl.split('-').join(' ');
  14 |     }
  15 |     else if (url.includes('/search?q=')) {
  16 |         let productPartWithoutUrl = url.split('/search?q=')[1];
  17 |         productPart = productPartWithoutUrl.split('+').join(' ');
  18 |     }
  19 |     else{
  20 |         productPart = null;
  21 |     }
  22 |
  23 |
  24 |     return productPart;
  25 |     
  26 | }
  27 |
  28 | async verifyCart() {
  29 |     const cart = await this.page.locator('//*[@id="cart_block"]');
  30 |         await cart.waitFor({state:"visible"});
  31 |         await cart.click({ force: true });
  32 |         await this.page.locator('#cart-sidebar div').filter({ hasText: 'Your Basket' }).getByRole('link').click();
  33 |         
  34 |         return await cart.isVisible();
  35 |     }
  36 |     
  37 |     async productClickFromHomepage(productIndex:String){
  38 |         const product = this.page.locator('.indiv-product').first();
  39 |         const productName = await product.locator('.indiv-product-title-text').textContent();
  40 |         const homePage = new HomePage(this.page);
  41 |         let newUrl;
  42 |         
  43 |         let productOldPrice = "No discount available";
  44 |         if (await product.locator('span.money.nosto-list-price').isVisible()) {
  45 |             productOldPrice = (await product.locator('span.money.nosto-list-price').textContent()) ?? "No discount available";
  46 |         }
  47 |         
  48 |         const productLivePrice = await product.locator('span.money.nosto-price').textContent();
  49 |         //console.log(productName+" "+productOldPrice+" "+productLivePrice);
  50 |         
  51 |           const initialUrl = this.page.url();
  52 |           await product.waitFor({state:"visible"});
  53 |           await product.click({ force: true });
  54 |           newUrl = await homePage.navigate(this.page.url());
  55 |           await this.page.waitForLoadState('domcontentloaded', { timeout: 120000 });
  56 |
  57 |         
  58 |         const pageReloaded = await initialUrl !== newUrl;
  59 |         return { pageReloaded, newUrl, productName, productOldPrice, productLivePrice };
  60 |     }
  61 |     
  62 |     async addToCartFromDetails(url:string){
  63 |         const homePage = new HomePage(this.page);
  64 |         homePage.navigate(url);
  65 |         
  66 |         const DetailsLocator = await this.page.locator('.summary.entry-summary h2.name');
> 67 |         await DetailsLocator.waitFor({state:'visible'});
     |                              ^ Error: locator.waitFor: Test timeout of 120000ms exceeded.
  68 |         const description = await DetailsLocator.first().textContent();
  69 |
  70 |         const livePrice = await this.page.locator('.summary.entry-summary #price').textContent();
  71 |         //console.log(" "+description+" "+livePrice);
  72 |
  73 |         const addBasket= await this.page.locator('//*[@class="add_to_cart clearfix "]//input[@type="submit"]');
  74 |         addBasket.waitFor({state:'visible'});
  75 |         await addBasket.click({force: true});
  76 |         await this.page.waitForLoadState('load');
  77 |         await this.page.locator('//*[@class="cart-window"]//a[@class="close-cart"]').waitFor({state:'visible'});
  78 |         
  79 |         return {description, livePrice};
  80 |     }
  81 | }
```